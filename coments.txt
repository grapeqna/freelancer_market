

# from fastapi import FastAPI, Depends, HTTPException
# from sqlalchemy.orm import Session
# from database import engine, SessionLocal, Base
# from models.freelancer import Freelancer
# from schemas import FreelancerResponse
# #from models import Freelancer, Job, Proposal
# #from models import freelancer, job, proposal

# app = FastAPI()

# # Dependency to get the database session
# def get_db():
#     db = SessionLocal()
#     try:
#         yield db
#     finally:
#         db.close()

# # Create
# @app.post("/freelancers/")
# def create_freelancer(freelancer: Freelancer, db: Session = Depends(get_db)):
#     db.add(freelancer)
#     db.commit()
#     db.refresh(freelancer)
#     return freelancer

# # Read
# @app.get("/freelancers/{freelancer_id}")
# def read_freelancer(freelancer_id: int, db: Session = Depends(get_db)):
#     freelancer = db.query(Freelancer).filter(Freelancer.id == freelancer_id).first()
#     if freelancer:
#         return freelancer
#     raise HTTPException(status_code=404, detail="Freelancer not found")

# # Update
# @app.put("/freelancers/{freelancer_id}")
# def update_freelancer(freelancer_id: int, freelancer: Freelancer, db: Session = Depends(get_db)):
#     db_freelancer = db.query(Freelancer).filter(Freelancer.id == freelancer_id).first()
#     if db_freelancer:
#         for key, value in freelancer.dict().items():
#             setattr(db_freelancer, key, value)
#         db.commit()
#         db.refresh(db_freelancer)
#         return db_freelancer
#     raise HTTPException(status_code=404, detail="Freelancer not found")

# # Delete
# @app.delete("/freelancers/{freelancer_id}")
# def delete_freelancer(freelancer_id: int, db: Session = Depends(get_db)):
#     freelancer = db.query(Freelancer).filter(Freelancer.id == freelancer_id).first()
#     if freelancer:
#         db.delete(freelancer)
#         db.commit()
#         return freelancer
#     raise HTTPException(status_code=404, detail="Freelancer not found")

# # Your existing root endpoint
# @app.get("/")
# def read_root(db: Session = Depends(get_db)):
#     # Example query using the database session
#     result = db.execute("SELECT 'Hello, World!' AS message")
#     return {"message": result.scalar()}


# # @app.on_event("startup")
# # def startup_event():
# #     # Move the create_all call to the startup event
# #     Base.metadata.create_all(bind=engine, tables=[
# #         freelancer.Freelancer.__table__,
# #         job.Job.__table__,
# #         proposal.Proposal.__table__,
# #     ])

# # def get_db():
# #     db = SessionLocal()
# #     try:
# #         yield db
# #     finally:
# #         db.close()

# # def read_root(db: Session = Depends(get_db)):
# #     # Example query using the database session
# #     result = db.execute("SELECT 'Hello, World!' AS message")
# #     return {"message": result.scalar()}

# # @app.post("/freelancers/", response_model=freelancer)
# # def create_freelancer(freelancer: freelancer, db: Session = Depends(get_db)):
# #     db.add(freelancer)
# #     db.commit()
# #     db.refresh(freelancer)
# #     return freelancer


# # @app.get("/freelancers/{freelancer_id}", response_model=freelancer)
# # def read_freelancer(freelancer_id: int, db: Session = Depends(get_db)):
# #     freelancer = db.query(freelancer).filter(freelancer.id == freelancer_id).first()
# #     if freelancer is None:
# #         raise HTTPException(status_code=404, detail="Freelancer not found")
# #     return freelancer

# # @app.put("/freelancers/{freelancer_id}", response_model=freelancer)
# # def update_freelancer(freelancer_id: int, updated_freelancer: freelancer, db: Session = Depends(get_db)):
# #     freelancer = db.query(freelancer).filter(freelancer.id == freelancer_id).first()
# #     if freelancer is None:
# #         raise HTTPException(status_code=404, detail="Freelancer not found")
# #     for key, value in updated_freelancer.dict().items():
# #         setattr(freelancer, key, value)
# #     db.commit()
# #     db.refresh(freelancer)
# #     return freelancer

# # @app.delete("/freelancers/{freelancer_id}", status_code=204)
# # def delete_freelancer(freelancer_id: int, db: Session = Depends(get_db)):
# #     freelancer = db.query(freelancer).filter(freelancer.id == freelancer_id).first()
# #     if freelancer is None:
# #         raise HTTPException(status_code=404, detail="Freelancer not found")
# #     db.delete(freelancer)
# #     db.commit()
# #     return None

# # # @app.on_event("startup")
# # # def startup_event():
# # #     # Move the create_all call to the startup event
# # #     Base.metadata.create_all(bind=engine, tables=[
# # #         freelancer.Freelancer.__table__,
# # #         job.Job.__table__,
# # #         proposal.Proposal.__table__,
# # #     ])

# # # @app.get("/")
# # # async def root():
# # #     return {"important message": "Save the World!!!!!!!"}

# # # #crud - create, read, update, delete
# # # #create
# # # @app.post("/items/")
# # # def create_item(item: Item):
# # #     # Create item logic
# # #     return item

# # # #read
# # # @app.get("/items/{item_id}")
# # # def read_item(item_id: int):
# # #     # Read item logic
# # #     return {"item_id": item_id}

# # # #update
# # # @app.put("/items/{item_id}")
# # # def update_item(item_id: int, updated_item: UpdateItem):
# # #     # Update item logic
# # #     return {"item_id": item_id, "updated_item": updated_item}

# # # #delete
# # # @app.delete("/items/{item_id}")
# # # def delete_item(item_id: int):
# # #     # Delete item logic
# # #     return {"message": "Item deleted", "item_id": item_id}